<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>examenes</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="font\font-awesome-4.7.0\css\font-awesome.min.css">
 

</head>
<body>
    
    <h2 style="text-align: center;">RESULTADOS EXÁMENES</h2>
    
    <style>
    .animated-footer {
  overflow: hidden;
  white-space: nowrap;
  width: 100%;
  background-color: #333; /* Cambia el color de fondo según tus preferencias */
}

.scrolling-text {
  animation: scroll 15s linear infinite;
  color: #fff; /* Cambia el color del texto según tus preferencias */
}

@keyframes scroll {
  0% {
    transform: translateX(100%);
  }
  100% {
    transform: translateX(-100%);
  }
}

/* Estilos para el texto fijo */
.fixed-text {
    font-size: 16px; /* Tamaño de fuente igual al texto animado */
    display: none; /* Inicialmente oculto */
}
        /* Estilos generales */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }

        /* Estilos para el contenedor de la tabla */
.detalle-seccion.resumen-ventas{
    width: 100%;
            max-height: 400px;
            margin: 20px auto;
            margin-top:5px;
            padding: 10px;
            overflow-x: auto;
            border: 1px solid #ccc;
            background-color: #fff;
            border-radius: 5px;
}


        .table-container {
            width: 80%;
            max-height: 400px;
            margin: 20px auto;
            margin-top:5px;
            padding: 10px;
            overflow-x: auto;
            border: 1px solid #ccc;
            background-color: #fff;
            border-radius: 5px;
        }

        /* Estilos para la tabla */
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            text-align: left;
            padding: 8px;
            font-size: 14px;
        }

        th {
            background-color: #eee5ed;
        }

        /* Barra de deslizamiento vertical */
        .table-container::-webkit-scrollbar {
            width: 10px;
        }

        .table-container::-webkit-scrollbar-thumb {
            background-color: #888;
        }

        .table-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        tr:hover {
            background-color: #bbafe2;
            cursor: pointer;
        }

        /* Estilos para la contenedor de información detallada */
        .detalle-contenedor {
            display: flex;
            justify-content: space-between;
            width: 80%;
            margin: 0 auto;
            font-size: 14px;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-top: 20px;
            padding: 10px;
        }

        .detalle-seccion {
            width: 48%;
            padding: 10px;
            padding-top: 0px;
        }

        /* Estilos para la fila seleccionada */
        tr.selected {
            background-color: #2b74c8;
            color: white;
        
        }
        tr.null-id_u_kj td:nth-child(5) {
            background-color: #ff0000; /* Rojo claro */
            color: white;
        }
        tr.bien td:nth-child(5) {
            background-color: #0080ff; /* Rojo claro */
            color: white;
        }
        .search-container {
    text-align: center;
    margin: 20px auto;
}
.detalle-contenedor h3{
    margin:0px;
    margin-bottom: 5px;
}
p{
    border: 0.8px solid #ddd;
    margin:0px;
    padding:5px;
}
p:hover{
    background-color: #bbafe2;
}
#searchInput {
            padding: 5px;
            font-size: 12px;
        }

        #searchInput::placeholder {
            color: #888;
        }

        #searchButton {
            padding: 5px 10px;
            font-size: 12px;
        }
       
        #totalVentas {
            color: red;
            margin-left: 5px;
        }

        #resultadoConsulta {
            font-size: 12px;
        }

        /* Estilos para los botones */
        #contadorVentas {
    display: flex;
    justify-content: center;
    align-items: stretch;
}

.boton {
    background-color: #2b74c8;
    color: white;
    
    font-size: 12px;
    border: none;
    cursor: pointer;
    
    border-radius: 12px;
}
.boton:hover{
    background-color: #bbafe2;
}

.resultado-consulta {
    text-align: center;
    margin: 0 10px;
}
#totalVentas{
    padding-right: 20px;
    
}
#Ventasdiariastit{
    padding-right: 10px;
}
.total-ventas {
    background-color: white;
    padding: 10px;
    display: inline-block;
    margin-right: 20px;
    font-size: 12px;
    border-top-right-radius: 10px;
    border-top-left-radius: 10px;
}

.ventas-diarias {
    background-color: white;
    display: inline-block;
    padding: 10px;
    font-size: 12px;
    margin-right: 20px;
    border-top-right-radius: 10px;
    border-top-left-radius: 10px;
}
#paispopcont {
    background-color: white;
    display: inline-block;
    padding: 10px;
    font-size: 12px;
    border-top-right-radius: 10px;
    border-top-left-radius: 10px;
}
.total-ingresos{
    background-color: white;
    padding: 10px;
    display: inline-block;
    margin-right: 20px;
    font-size: 12px;
    border-top-right-radius: 10px;
    border-top-left-radius: 10px;
}
.total-ingresos:hover{

    background-color: #bbafe2;
    cursor: pointer;
}
#totaling{
    color:red;
}
#aqui{
    cursor: pointer;
}
#aqui:hover{
    background-color: #bbafe2;
}
#export{
    margin-left: 20px;
    background-color: white;
    display: inline-block;
    padding: 10px;
    font-size: 12px;
    border-top-right-radius: 10px;
    border-top-left-radius: 10px;
    cursor: pointer;
}
#export:hover{
    background-color: #bbafe2;
}
#exportdet{
    margin-left: 20px;
    background-color: white;
    display: inline-block;
    padding: 10px;
    font-size: 12px;
    border-top-right-radius: 10px;
    border-top-left-radius: 10px;
    cursor: pointer;
}
#exportdet:hover{
    background-color: #bbafe2;
}
p:hover{
    opacity:0.5;
}
    </style>
 <div class="search-container">
    <input type="text" id="searchInput" placeholder="Buscar en la tabla">
    <button id="searchButton">Buscar</button>
    
</div>


<div id="contadorVentas">
  <div class="total-ventas" id="aqui">
        Total de exámenes: <span id="totalVentas">0</span>
  </div>
  <div class="total-ingresos">
        Puntaje perfecto: <span id="totaling">0</span> 
  </div>
   
  <div id="export">
     <div id="exportarCSV">Exportar todo <i class="fa fa-file-text-o" aria-hidden="true"></i></div>
  </div>


</div>

 


<div class="table-container">
      
      
        <table>
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Email</th>
                    <th>Pais</th>
                    <th>Correctas</th>
                    <th>Incorrectas</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <!-- Datos de la tabla se llenarán aquí -->
            </tbody>
        </table>
    </div>

    <div class="detalle-contenedor">
        <div class="detalle-seccion perfil-usuario">
            <h2>Respuestas de usuario</h2>
            <p>Pregunta 1: </p>
            <p>Pregunta 2: </p>
            <p>Pregunta 3: </p>
            <p>Pregunta 4: </p>
            <p>Pregunta 5: </p>
            <p>Pregunta 6: </p>
            <p>Pregunta 7: </p>
            <p>Pregunta 8: </p>
           
         
            <p>Pais: </p>
        </div>

        <div class="detalle-seccion compra">
            <h2>Comentario</h2>
            <p>comentario...</p>
           
        </div>

      
    </div>

    <script>
        const { createClient } = supabase;
            const _supabase = createClient('https://yhfyasuswpdzupdzllvo.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InloZnlhc3Vzd3BkenVwZHpsbHZvIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODk5ODM4NTcsImV4cCI6MjAwNTU1OTg1N30.ORQTRiX-X72q81RcsXww1nk75POlGgHQwKX6Meb4wzk');
     

// Obtén una referencia al botón de exportar CSV
const exportarCSVButton = document.getElementById('exportarCSV');

// Agrega un controlador de eventos para el botón
exportarCSVButton.addEventListener('click', () => {
    exportarDataCSV();
});

// Función para exportar la data de la base de datos en formato CSV
async function exportarDataCSV() {
    try {
        // Consulta la data de la base de datos desde Supabase
        const { data, error } = await _supabase
            .from('examen')
            .select('*');

        if (error) {
            console.error('Error al consultar datos:', error);
            return;
        }

        if (data.length === 0) {
            console.log('No se encontraron datos en la base de datos.');
            return;
        }

        // Convierte la data en formato CSV
        const csvContent = convertirDataACSV(data);

        // Crea un enlace de descarga y establece el contenido del archivo CSV
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'data.csv';
        a.style.display = 'none';

        // Agrega el enlace al documento y simula un clic para iniciar la descarga
        document.body.appendChild(a);
        a.click();

        // Limpia el enlace y libera el recurso
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    } catch (error) {
        console.error('Error al exportar la data en formato CSV:', error);
    }
}

// Función para convertir la data en formato CSV
function convertirDataACSV(data) {
    const headers = Object.keys(data[0]).join(',');
    const csvRows = data.map((row) => Object.values(row).join(','));
    return headers + '\n' + csvRows.join('\n');
}


/*
// Obtén una referencia al botón de exportar detalle a CSV
const exportarDetalleCSVButton = document.getElementById('exportarDetalleCSV');

// Agrega un controlador de eventos para el botón
exportarDetalleCSVButton.addEventListener('click', () => {
    exportarDetalleCSV();
});

// Función para exportar el contenido del detalle a un archivo CSV
function exportarDetalleCSV() {
    try {
        // Obtén el elemento que contiene el detalle
        const detalleContenedor = document.querySelector('.detalle-contenedor');

        // Verifica si el detalle-contenedor está presente
        if (detalleContenedor) {
            const detalleContenido = detalleContenedor.textContent;

            // Convierte el contenido en formato CSV
            const csvContent = convertirDetalleACSV(detalleContenido);

            // Crea un enlace de descarga y establece el contenido del archivo CSV
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'detalle.csv';
            a.style.display = 'none';

            // Agrega el enlace al documento y simula un clic para iniciar la descarga
            document.body.appendChild(a);
            a.click();

            // Limpia el enlace y libera el recurso
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } else {
            console.log('No se encontró el elemento "detalle-contenedor".');
        }
    } catch (error) {
        console.error('Error al exportar el detalle en formato CSV:', error);
    }
}

// Función para convertir el contenido en formato CSV (personaliza según la estructura del detalle)
function convertirDetalleACSV(detalleContenido) {
    // Esta función depende de la estructura del detalle. Puedes personalizarla según tu necesidad.
    // En este ejemplo, simplemente se toma el contenido del detalle y se coloca en un archivo CSV.
    return detalleContenido;
}
*/






         let currentSearch = '';

        async function fetchData() {
           
            const { data, error } = await _supabase.from('examen').select('*').order('created_at', { ascending: false });

            if (error) {
                console.error('Error al consultar datos:', error);
            } else {
                const tableBody = document.getElementById('tableBody');
                var perfecto = 0;
                const perfect = document.getElementById('totaling');
                data.forEach((row) => {


                    
                    const newRow = document.createElement('tr');
                    
                    newRow.innerHTML = `
                        <td>${row.nombre}</td>
                        <td>${row.apellido}</td>
                        <td>${row.email}</td>
                        <td>${row.pais}</td>
                        <td>${row.correctas}</td>
                        <td>${row.incorrectas}</td>
                        <td>${row.created_at}</td>
                    `;

                    //<td>${row.pregunta1 ? row.pregunta1 : "Sin respuesta"}</td>
                      //  <td>${row.pregunta2 ? row.pregunta2 : "Sin respuesta"}</td>
                        

                    tableBody.appendChild(newRow);

                    newRow.addEventListener('click', function () {
                       // console.log(row);
                      
                        mostrarInformacionDetallada.call(this, row);
                    });
                    if (row.correctas < 8) {
                        newRow.classList.add('null-id_u_kj');
                    } else{
                        newRow.classList.add('bien');
                        perfecto++;
                        console.log(perfecto);
                        perfect.textContent = perfecto;
                    }

                  
                });
                if (data.length > 0) {
                    // Mostrar los detalles del primer elemento de la tabla
                    mostrarInformacionDetallada.call(tableBody.children[0], data[0]);
                }
               
                const totalVentas = data.length;
    const contadorVentas = document.getElementById('totalVentas');
    contadorVentas.textContent = totalVentas;

   



            }
        }

        function mostrarInformacionDetallada(row) {
    const perfilUsuario = document.querySelector('.detalle-seccion.perfil-usuario');
    const compra = document.querySelector('.detalle-seccion.compra');
    perfilUsuario.style.display = 'block';
    compra.style.display = 'block';

    if (row) {
        const respuestasCorrectas = {
            pregunta1: "d) I y IV",
            pregunta2: "c) I y II",
            pregunta3: "d) II y III",
            pregunta4: "e)",
            pregunta5: "d) II y IV",
            pregunta6: "b) I, II y IV",
            pregunta7: "d)",
            pregunta8: "c) I, III y IV son correctas."
        };

        const tableRows = document.querySelectorAll('#tableBody tr');
        tableRows.forEach((tableRow) => {
            tableRow.classList.remove('selected');
        });

        if (this) {
            this.classList.add('selected');
        }

        perfilUsuario.innerHTML = '<h3>Respuestas de usuario</h3>';
        compra.innerHTML = '<h3>Comentario</h3>';

        for (let i = 1; i <= 8; i++) {
            const pregunta = `pregunta${i}`;
            const respuestaUsuario = row[pregunta] || "Sin respuesta";
            const respuestaCorrecta = respuestasCorrectas[pregunta];

            const preguntaElement = document.createElement('p');
            preguntaElement.textContent = `${pregunta}: ${respuestaUsuario}`;

            // Comparar la respuesta del usuario con la respuesta correcta
            if (respuestaUsuario !== respuestaCorrecta) {
                preguntaElement.style.backgroundColor = 'red';
                preguntaElement.style.color = 'white';
            }else{
                preguntaElement.style.backgroundColor = '#0080ff';
                preguntaElement.style.color = 'white';
            }

            perfilUsuario.appendChild(preguntaElement);
        }

        compra.innerHTML = `
            <h3>Comentario</h3>
            <p>${row.comentario || "Sin comentario"}</p>
        `;
    } else {
        perfilUsuario.innerHTML = '<h2>Perfil de usuario</h2><p>No se encontró información.</p>';
        compra.innerHTML = '<h2>Compra</h2><p>No se encontró información.</p>';
    }
}

       
const searchInput = document.getElementById('searchInput');
const searchButton = document.getElementById('searchButton');

// Agrega un controlador de eventos para la tecla "Enter" en el campo de entrada
searchInput.addEventListener('keyup', (event) => {
  if (event.key === 'Enter') {
    buscarEnTabla();
  }
});

// Agrega un controlador de eventos para el botón de búsqueda
searchButton.addEventListener('click', () => {
  buscarEnTabla();
});



        function buscarEnTabla() {
            const searchInput = document.getElementById('searchInput').value.toLowerCase(); // Obtener el texto de búsqueda en minúsculas
  const tableRows = document.querySelectorAll('#tableBody tr');

  tableRows.forEach((tableRow) => {
    let found = false; // Variable para verificar si se encontró el término de búsqueda en alguna celda

    // Recorrer todas las celdas de la fila actual
    for (let i = 0; i < tableRow.cells.length; i++) {
      const cellText = tableRow.cells[i].textContent.toLowerCase(); // Obtener el contenido de la celda en minúsculas

      // Verificar si el término de búsqueda se encuentra en la celda
      if (cellText.includes(searchInput)) {
        found = true;
        break; // Si se encuentra en una celda, no es necesario seguir buscando en otras celdas
      }
    }

    // Mostrar u ocultar la fila según si se encontró el término de búsqueda
    if (found) {
      tableRow.style.display = ''; // Mostrar la fila si se encontró en alguna celda
      tableRow.click(); 
    } else {
      tableRow.style.display = 'none'; // Ocultar la fila si no se encontró en ninguna celda
    }
  });
  
}

        fetchData(); // Llama a la función para iniciar la consulta de datos

        document.querySelector('.total-ventas').addEventListener('click', function() {
    const tableRows = document.querySelectorAll('#tableBody tr');
    tableRows.forEach((tableRow) => {
        tableRow.style.display = ''; // Muestra todas las filas de la tabla
    });
});



        document.querySelector('.total-ingresos').addEventListener('click', function() {
    const tableRows = document.querySelectorAll('#tableBody tr');
    tableRows.forEach((tableRow) => {
        const correctas = parseInt(tableRow.querySelector('td:nth-child(5)').textContent); // Obtiene el valor de "correctas" en la fila actual
        if (correctas === 8) {
            tableRow.style.display = ''; // Muestra la fila si "correctas" es igual a 8
        } else {
            tableRow.style.display = 'none'; // Oculta la fila si "correctas" no es igual a 8
        }
    });
});


    </script>
   <script>
  
      </script>
   <footer class="animated-footer">
    <div class="scrolling-text">Actualizar para ver cambios<span id="current-date"></span></div>
   

</footer>
</body>
</html>
